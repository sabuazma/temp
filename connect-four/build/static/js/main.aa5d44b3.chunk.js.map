{"version":3,"sources":["index.js"],"names":["Square","props","className","style","onClick","Grid","state","squares","Array","fill","redIsNext","filled","i","this","slice","checkWinner","setState","value","handleClick","status","winner","renderSquare","React","Component","arrayWin","length","a","b","c","d","includes","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa5d44b3.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n//Buttons for player to click\nfunction Square(props) \n{\n    //button changes colour depending on which player clicked it \n    return (<button className=\"square\" style={props.style} onClick={props.onClick}></button>);\n}\n\n//Grid class - the 6x7 grid\nclass Grid extends React.Component \n{\n  constructor(props) \n  {\n    super(props);\n    this.state = {\n      squares: Array(42).fill(null),//Empty array\n      redIsNext: true,//turns\n      filled: Array(42).fill('#FFFFFF'),//fills the array with the colour white\n    };\n  }\n  //handles the event of when a button is clicked\n  handleClick(i) \n  {\n    const squares = this.state.squares.slice();//creates a copy of squares array to modify\n    const filled = this.state.filled.slice();//creates a copy of the filled array to modify\n\n    if (checkWinner(squares) || squares[i]) {return;} //checks if theres a winner or if all the buttons are filled after each round\n\n    squares[i] = this.state.redIsNext ? 'red' : 'yellow'; //assigns a square a value based on whos turn it is\n    filled[i] = this.state.redIsNext ? '#FF0000' : '#FFD500';//assigns the color of square based on whos turn it is\n    \n    this.setState({\n      squares: squares, //updates squares array\n      redIsNext: !this.state.redIsNext, //switches turns\n      filled: filled, //updates filled array\n    });\n  }\n  //fills the square with the required information and sends it to the Square function\n  renderSquare(i) \n  {\n    return(\n    <Square \n    value={this.state.squares[i]}\n    style={{\"backgroundColor\":this.state.filled[i]}}\n    onClick={() => this.handleClick(i)}\n    />\n    );\n  }\n  render() \n  {\n    const winner = checkWinner(this.state.squares); //checks the winner\n    let status;\n    if (winner) {status = 'Winner: ' + winner;} //if theres a winner\n    else {status = 'Next player: ' + (this.state.redIsNext ? 'red' : 'yellow');} //else continue the game\n    //renders the squares and displays status of game\n    return (\n      <div>\n        <div className=\"status\">{status}</div> \n        <div className=\"grid-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n          {this.renderSquare(6)}\n        </div>\n        <div className=\"grid-row\">\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n          {this.renderSquare(9)}\n          {this.renderSquare(10)}\n          {this.renderSquare(11)}\n          {this.renderSquare(12)}\n          {this.renderSquare(13)}\n        </div>\n        <div className=\"grid-row\">\n          {this.renderSquare(14)}\n          {this.renderSquare(15)}\n          {this.renderSquare(16)}\n          {this.renderSquare(17)}\n          {this.renderSquare(18)}\n          {this.renderSquare(19)}\n          {this.renderSquare(20)}\n        </div>\n        <div className=\"grid-row\">\n          {this.renderSquare(21)}\n          {this.renderSquare(22)}\n          {this.renderSquare(23)}\n          {this.renderSquare(24)}\n          {this.renderSquare(25)}\n          {this.renderSquare(26)}\n          {this.renderSquare(27)}\n        </div>\n        <div className=\"grid-row\">\n          {this.renderSquare(28)}\n          {this.renderSquare(29)}\n          {this.renderSquare(30)}\n          {this.renderSquare(31)}\n          {this.renderSquare(32)}\n          {this.renderSquare(33)}\n          {this.renderSquare(34)}\n        </div>\n        <div className=\"grid-row\">\n          {this.renderSquare(35)}\n          {this.renderSquare(36)}\n          {this.renderSquare(37)}\n          {this.renderSquare(38)}\n          {this.renderSquare(39)}\n          {this.renderSquare(40)}\n          {this.renderSquare(41)}\n        </div>\n      </div>\n    );\n  }\n}\n\n//checks if theres a winner to the game \nfunction checkWinner(squares) \n{\n  //array combinations where the player would win\n  const arrayWin = [ [0, 1, 2, 3], [41, 40, 39, 38], [7, 8, 9, 10],[34, 33, 32, 31], \n  [14, 15, 16, 17], [27, 26, 25, 24], [21, 22, 23, 24], [20, 19, 18, 17], [28, 29, 30, 31],\n  [13, 12, 11, 10], [35, 36, 37, 38], [6, 5, 4, 3], [0, 7, 14, 21], [41, 34, 27, 20],\n  [1, 8, 15, 22], [40, 33, 26, 19], [2, 9, 16, 23], [39, 32, 25, 18], [3, 10, 17, 24],\n  [38, 31, 24, 17], [4, 11, 18, 25], [37, 30, 23, 16], [5, 12, 19, 26], [36, 29, 22, 15],\n  [6, 13, 20, 27], [35, 28, 21, 14], [1, 2, 3, 4], [5, 4, 3, 2], [8, 9, 10, 11], [12, 11, 10, 9],\n  [15, 16, 17, 18], [19, 18, 17, 16], [22, 23, 24, 25], [26, 25, 24, 23], [29, 30, 31, 32], \n  [33, 32, 31, 30], [36, 37, 38, 39], [40, 39, 38, 37], [7, 14, 21, 28], [8, 15, 22, 29],\n  [9, 16, 23, 30], [10, 17, 24, 31], [11, 18, 25, 32], [12, 19, 26, 33], [13, 20, 27, 34],];\n  \n  //checks if there's four of the same pieces horizontally/vertically\n  for (let i = 0; i < arrayWin.length; i++) \n  {\n    const [a, b, c, d] = arrayWin[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]&&squares[a] === squares[d]) {\n      return squares[a];\n    }\n  }\n  if (!squares.includes(null)){return 'Draw';}//if all the squares are filled\n  //if theres no winner\n  return null;\n}\n//Game class wraps the grid class to display under certain settings\nclass Game extends React.Component \n{\n  render() \n  {\n    return (<div className=\"game\"> <Grid /> </div>);\n  }\n}\n\n//renders game\nReactDOM.render(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}